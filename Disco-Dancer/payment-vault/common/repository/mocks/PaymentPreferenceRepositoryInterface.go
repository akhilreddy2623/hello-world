// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	enums "geico.visualstudio.com/Billing/plutus/enums"
	db "geico.visualstudio.com/Billing/plutus/payment-vault-common/models/db"

	mock "github.com/stretchr/testify/mock"

	repository "geico.visualstudio.com/Billing/plutus/payment-vault-common/repository"
)

// PaymentPreferenceRepositoryInterface is an autogenerated mock type for the PaymentPreferenceRepositoryInterface type
type PaymentPreferenceRepositoryInterface struct {
	mock.Mock
}

// GetPaymentPreference provides a mock function with given fields: userId, productIdentifier, transactionTypeEnum, paymentRequestTypeEnum
func (_m *PaymentPreferenceRepositoryInterface) GetPaymentPreference(userId string, productIdentifier string, transactionTypeEnum enums.TransactionType, paymentRequestTypeEnum enums.PaymentRequestType) ([]repository.PaymentPreference, error) {
	ret := _m.Called(userId, productIdentifier, transactionTypeEnum, paymentRequestTypeEnum)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentPreference")
	}

	var r0 []repository.PaymentPreference
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, enums.TransactionType, enums.PaymentRequestType) ([]repository.PaymentPreference, error)); ok {
		return rf(userId, productIdentifier, transactionTypeEnum, paymentRequestTypeEnum)
	}
	if rf, ok := ret.Get(0).(func(string, string, enums.TransactionType, enums.PaymentRequestType) []repository.PaymentPreference); ok {
		r0 = rf(userId, productIdentifier, transactionTypeEnum, paymentRequestTypeEnum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.PaymentPreference)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, enums.TransactionType, enums.PaymentRequestType) error); ok {
		r1 = rf(userId, productIdentifier, transactionTypeEnum, paymentRequestTypeEnum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorePaymentPreference provides a mock function with given fields: model
func (_m *PaymentPreferenceRepositoryInterface) StorePaymentPreference(model *db.StorePaymentPreference) error {
	ret := _m.Called(model)

	if len(ret) == 0 {
		panic("no return value specified for StorePaymentPreference")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.StorePaymentPreference) error); ok {
		r0 = rf(model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPaymentPreferenceRepositoryInterface creates a new instance of PaymentPreferenceRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentPreferenceRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentPreferenceRepositoryInterface {
	mock := &PaymentPreferenceRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
