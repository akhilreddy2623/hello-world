// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	messaging "geico.visualstudio.com/Billing/plutus/common-models/messaging"
	db "geico.visualstudio.com/Billing/plutus/task-manager-common/models/db"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ScheduledTaskRepositoryInterface is an autogenerated mock type for the ScheduledTaskRepositoryInterface type
type ScheduledTaskRepositoryInterface struct {
	mock.Mock
}

// AreTaskDependenciesMet provides a mock function with given fields: taskId, executionDate
func (_m *ScheduledTaskRepositoryInterface) AreTaskDependenciesMet(taskId int, executionDate time.Time) (*db.ScheduledTask, error) {
	ret := _m.Called(taskId, executionDate)

	if len(ret) == 0 {
		panic("no return value specified for AreTaskDependenciesMet")
	}

	var r0 *db.ScheduledTask
	var r1 error
	if rf, ok := ret.Get(0).(func(int, time.Time) (*db.ScheduledTask, error)); ok {
		return rf(taskId, executionDate)
	}
	if rf, ok := ret.Get(0).(func(int, time.Time) *db.ScheduledTask); ok {
		r0 = rf(taskId, executionDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.ScheduledTask)
		}
	}

	if rf, ok := ret.Get(1).(func(int, time.Time) error); ok {
		r1 = rf(taskId, executionDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PersistTaskExecutionRequestInDB provides a mock function with given fields: taskExecution
func (_m *ScheduledTaskRepositoryInterface) PersistTaskExecutionRequestInDB(taskExecution *db.TaskExecution) error {
	ret := _m.Called(taskExecution)

	if len(ret) == 0 {
		panic("no return value specified for PersistTaskExecutionRequestInDB")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.TaskExecution) error); ok {
		r0 = rf(taskExecution)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTaskStatus provides a mock function with given fields: executeTaskResponses
func (_m *ScheduledTaskRepositoryInterface) UpdateTaskStatus(executeTaskResponses messaging.ExecuteTaskResponse) error {
	ret := _m.Called(executeTaskResponses)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(messaging.ExecuteTaskResponse) error); ok {
		r0 = rf(executeTaskResponses)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewScheduledTaskRepositoryInterface creates a new instance of ScheduledTaskRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScheduledTaskRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScheduledTaskRepositoryInterface {
	mock := &ScheduledTaskRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
