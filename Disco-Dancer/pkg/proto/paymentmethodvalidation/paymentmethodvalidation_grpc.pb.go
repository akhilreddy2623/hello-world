// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: paymentmethodvalidation/paymentmethodvalidation.proto

package paymentmethodvalidation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentMethodValidationServiceClient is the client API for PaymentMethodValidationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentMethodValidationServiceClient interface {
	ValidatePaymentMethod(ctx context.Context, in *PaymentMethodValidationRequest, opts ...grpc.CallOption) (*PaymentMethodValidationResponse, error)
}

type paymentMethodValidationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentMethodValidationServiceClient(cc grpc.ClientConnInterface) PaymentMethodValidationServiceClient {
	return &paymentMethodValidationServiceClient{cc}
}

func (c *paymentMethodValidationServiceClient) ValidatePaymentMethod(ctx context.Context, in *PaymentMethodValidationRequest, opts ...grpc.CallOption) (*PaymentMethodValidationResponse, error) {
	out := new(PaymentMethodValidationResponse)
	err := c.cc.Invoke(ctx, "/paymentmethodvalidation.PaymentMethodValidationService/ValidatePaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentMethodValidationServiceServer is the server API for PaymentMethodValidationService service.
// All implementations must embed UnimplementedPaymentMethodValidationServiceServer
// for forward compatibility
type PaymentMethodValidationServiceServer interface {
	ValidatePaymentMethod(context.Context, *PaymentMethodValidationRequest) (*PaymentMethodValidationResponse, error)
	mustEmbedUnimplementedPaymentMethodValidationServiceServer()
}

// UnimplementedPaymentMethodValidationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentMethodValidationServiceServer struct {
}

func (UnimplementedPaymentMethodValidationServiceServer) ValidatePaymentMethod(context.Context, *PaymentMethodValidationRequest) (*PaymentMethodValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePaymentMethod not implemented")
}
func (UnimplementedPaymentMethodValidationServiceServer) mustEmbedUnimplementedPaymentMethodValidationServiceServer() {
}

// UnsafePaymentMethodValidationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentMethodValidationServiceServer will
// result in compilation errors.
type UnsafePaymentMethodValidationServiceServer interface {
	mustEmbedUnimplementedPaymentMethodValidationServiceServer()
}

func RegisterPaymentMethodValidationServiceServer(s grpc.ServiceRegistrar, srv PaymentMethodValidationServiceServer) {
	s.RegisterService(&PaymentMethodValidationService_ServiceDesc, srv)
}

func _PaymentMethodValidationService_ValidatePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentMethodValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMethodValidationServiceServer).ValidatePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paymentmethodvalidation.PaymentMethodValidationService/ValidatePaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMethodValidationServiceServer).ValidatePaymentMethod(ctx, req.(*PaymentMethodValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentMethodValidationService_ServiceDesc is the grpc.ServiceDesc for PaymentMethodValidationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentMethodValidationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "paymentmethodvalidation.PaymentMethodValidationService",
	HandlerType: (*PaymentMethodValidationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidatePaymentMethod",
			Handler:    _PaymentMethodValidationService_ValidatePaymentMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "paymentmethodvalidation/paymentmethodvalidation.proto",
}
