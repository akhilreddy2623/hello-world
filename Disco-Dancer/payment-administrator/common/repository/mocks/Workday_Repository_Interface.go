// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	messaging "geico.visualstudio.com/Billing/plutus/common-models/messaging"
	db "geico.visualstudio.com/Billing/plutus/payment-administrator-common/models/db"

	mock "github.com/stretchr/testify/mock"
)

// WorkdayRepositoryInterface is an autogenerated mock type for the WorkdayRepositoryInterface type
type WorkdayRepositoryInterface struct {
	mock.Mock
}

// GetWorkdayFeedRows provides a mock function with given fields: executeTaskRequest
func (_m *WorkdayRepositoryInterface) GetWorkdayFeedRows(executeTaskRequest messaging.ExecuteTaskRequestDb) ([]*db.WorkdayFeed, error) {
	ret := _m.Called(executeTaskRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkdayFeedRows")
	}

	var r0 []*db.WorkdayFeed
	var r1 error
	if rf, ok := ret.Get(0).(func(messaging.ExecuteTaskRequestDb) ([]*db.WorkdayFeed, error)); ok {
		return rf(executeTaskRequest)
	}
	if rf, ok := ret.Get(0).(func(messaging.ExecuteTaskRequestDb) []*db.WorkdayFeed); ok {
		r0 = rf(executeTaskRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.WorkdayFeed)
		}
	}

	if rf, ok := ret.Get(1).(func(messaging.ExecuteTaskRequestDb) error); ok {
		r1 = rf(executeTaskRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIsSentToWorkdayFalse provides a mock function with given fields: executeTaskRequest
func (_m *WorkdayRepositoryInterface) UpdateIsSentToWorkdayFalse(executeTaskRequest messaging.ExecuteTaskRequestDb) error {
	ret := _m.Called(executeTaskRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIsSentToWorkdayFalse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(messaging.ExecuteTaskRequestDb) error); ok {
		r0 = rf(executeTaskRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePaymentWorkdayFeedStatus provides a mock function with given fields: workdayFeedRows
func (_m *WorkdayRepositoryInterface) UpdatePaymentWorkdayFeedStatus(workdayFeedRows []*db.WorkdayFeed) {
	_m.Called(workdayFeedRows)
}

// NewWorkdayRepositoryInterface creates a new instance of WorkdayRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkdayRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkdayRepositoryInterface {
	mock := &WorkdayRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
