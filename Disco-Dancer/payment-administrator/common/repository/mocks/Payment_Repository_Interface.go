// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	json "encoding/json"

	db "geico.visualstudio.com/Billing/plutus/payment-administrator-common/models/db"

	messaging "geico.visualstudio.com/Billing/plutus/common-models/messaging"

	mock "github.com/stretchr/testify/mock"
)

// PaymentRepositoryInterface is an autogenerated mock type for the PaymentRepositoryInterface type
type PaymentRepositoryInterface struct {
	mock.Mock
}

// GetTenantInformationForPaymentId provides a mock function with given fields: paymentId
func (_m *PaymentRepositoryInterface) GetTenantInformationForPaymentId(paymentId int64) (int64, int64, json.RawMessage, error) {
	ret := _m.Called(paymentId)

	if len(ret) == 0 {
		panic("no return value specified for GetTenantInformationForPaymentId")
	}

	var r0 int64
	var r1 int64
	var r2 json.RawMessage
	var r3 error
	if rf, ok := ret.Get(0).(func(int64) (int64, int64, json.RawMessage, error)); ok {
		return rf(paymentId)
	}
	if rf, ok := ret.Get(0).(func(int64) int64); ok {
		r0 = rf(paymentId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(int64) int64); ok {
		r1 = rf(paymentId)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int64) json.RawMessage); ok {
		r2 = rf(paymentId)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(json.RawMessage)
		}
	}

	if rf, ok := ret.Get(3).(func(int64) error); ok {
		r3 = rf(paymentId)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// MakePayment provides a mock function with given fields: incomingPaymentRequest
func (_m *PaymentRepositoryInterface) MakePayment(incomingPaymentRequest *db.IncomingPaymentRequest) ([]db.Payment, error) {
	ret := _m.Called(incomingPaymentRequest)

	if len(ret) == 0 {
		panic("no return value specified for MakePayment")
	}

	var r0 []db.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.IncomingPaymentRequest) ([]db.Payment, error)); ok {
		return rf(incomingPaymentRequest)
	}
	if rf, ok := ret.Get(0).(func(*db.IncomingPaymentRequest) []db.Payment); ok {
		r0 = rf(incomingPaymentRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(*db.IncomingPaymentRequest) error); ok {
		r1 = rf(incomingPaymentRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessPayments provides a mock function with given fields: executeTaskRequest
func (_m *PaymentRepositoryInterface) ProcessPayments(executeTaskRequest messaging.ExecuteTaskRequestDb) (*int, error) {
	ret := _m.Called(executeTaskRequest)

	if len(ret) == 0 {
		panic("no return value specified for ProcessPayments")
	}

	var r0 *int
	var r1 error
	if rf, ok := ret.Get(0).(func(messaging.ExecuteTaskRequestDb) (*int, error)); ok {
		return rf(executeTaskRequest)
	}
	if rf, ok := ret.Get(0).(func(messaging.ExecuteTaskRequestDb) *int); ok {
		r0 = rf(executeTaskRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	if rf, ok := ret.Get(1).(func(messaging.ExecuteTaskRequestDb) error); ok {
		r1 = rf(executeTaskRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePaymentStatus provides a mock function with given fields: executePaymentResponses
func (_m *PaymentRepositoryInterface) UpdatePaymentStatus(executePaymentResponses messaging.ExecutePaymentResponse) error {
	ret := _m.Called(executePaymentResponses)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePaymentStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(messaging.ExecutePaymentResponse) error); ok {
		r0 = rf(executePaymentResponses)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPaymentRepositoryInterface creates a new instance of PaymentRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentRepositoryInterface {
	mock := &PaymentRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
